// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cppForest
List cppForest(NumericMatrix& x, NumericVector& y, int sampSize, int nodeSize, int maxNodes, int nTree, int mtry, int keepF, int replace, int classify, int ustat, int B);
RcppExport SEXP surfin_cppForest(SEXP xSEXP, SEXP ySEXP, SEXP sampSizeSEXP, SEXP nodeSizeSEXP, SEXP maxNodesSEXP, SEXP nTreeSEXP, SEXP mtrySEXP, SEXP keepFSEXP, SEXP replaceSEXP, SEXP classifySEXP, SEXP ustatSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type sampSize(sampSizeSEXP);
    Rcpp::traits::input_parameter< int >::type nodeSize(nodeSizeSEXP);
    Rcpp::traits::input_parameter< int >::type maxNodes(maxNodesSEXP);
    Rcpp::traits::input_parameter< int >::type nTree(nTreeSEXP);
    Rcpp::traits::input_parameter< int >::type mtry(mtrySEXP);
    Rcpp::traits::input_parameter< int >::type keepF(keepFSEXP);
    Rcpp::traits::input_parameter< int >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< int >::type classify(classifySEXP);
    Rcpp::traits::input_parameter< int >::type ustat(ustatSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cppForest(x, y, sampSize, nodeSize, maxNodes, nTree, mtry, keepF, replace, classify, ustat, B));
    return rcpp_result_gen;
END_RCPP
}
// cppMatch
DataFrame cppMatch(IntegerVector tr, NumericVector dist, char type);
RcppExport SEXP surfin_cppMatch(SEXP trSEXP, SEXP distSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type tr(trSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< char >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(cppMatch(tr, dist, type));
    return rcpp_result_gen;
END_RCPP
}
// cppPredict
NumericMatrix cppPredict(NumericMatrix x, IntegerMatrix splitVar, NumericMatrix split, IntegerMatrix lDaughter, IntegerMatrix rDaughter, NumericMatrix nodePred);
RcppExport SEXP surfin_cppPredict(SEXP xSEXP, SEXP splitVarSEXP, SEXP splitSEXP, SEXP lDaughterSEXP, SEXP rDaughterSEXP, SEXP nodePredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type splitVar(splitVarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type split(splitSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type lDaughter(lDaughterSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type rDaughter(rDaughterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nodePred(nodePredSEXP);
    rcpp_result_gen = Rcpp::wrap(cppPredict(x, splitVar, split, lDaughter, rDaughter, nodePred));
    return rcpp_result_gen;
END_RCPP
}
// cppProx
arma::mat cppProx(arma::umat nodes);
RcppExport SEXP surfin_cppProx(SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(cppProx(nodes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"surfin_cppForest", (DL_FUNC) &surfin_cppForest, 12},
    {"surfin_cppMatch", (DL_FUNC) &surfin_cppMatch, 3},
    {"surfin_cppPredict", (DL_FUNC) &surfin_cppPredict, 6},
    {"surfin_cppProx", (DL_FUNC) &surfin_cppProx, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_surfin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
